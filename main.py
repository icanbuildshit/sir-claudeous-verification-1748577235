from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional
from datetime import datetime
import uvicorn

app = FastAPI(
    title="Item API",
    description="Generated by Sir Claudeous Real Team System",
    version="1.0.0"
)

# Enable CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# Models
class ItemBase(BaseModel):
    name: str
    description: Optional[str] = None

class ItemCreate(ItemBase):
    pass

class Item(BaseModel):
    id: int
    name: str
    description: Optional[str]
    created_at: datetime
    
    class Config:
        from_attributes = True

# In-memory database
items_db = {}
next_id = 1

# Routes
@app.get("/")
def read_root():
    return {"message": "Welcome to Item API", "docs": "/docs"}

@app.get("/health")
def health_check():
    return {"status": "healthy", "timestamp": datetime.now()}

@app.get("/items", response_model=List[Item])
def get_items():
    """Get all items"""
    return list(items_db.values())

@app.get("/items/{id}", response_model=Item)
def get_item(id: int):
    """Get a specific item"""
    if id not in items_db:
        raise HTTPException(status_code=404, detail="Item not found")
    return items_db[id]

@app.post("/items", response_model=Item)
def create_item(item: ItemCreate):
    """Create a new item"""
    global next_id
    
    new_item = Item(
        id=next_id,
        name=item.name,
        description=item.description,
        created_at=datetime.now()
    )
    
    items_db[next_id] = new_item.dict()
    next_id += 1
    
    return new_item

@app.put("/items/{id}", response_model=Item)
def update_item(id: int, item: ItemCreate):
    """Update a item"""
    if id not in items_db:
        raise HTTPException(status_code=404, detail="Item not found")
    
    updated_item = items_db[id]
    updated_item.update(item.dict())
    updated_item["id"] = id  # Preserve ID
    
    return updated_item

@app.delete("/items/{id}")
def delete_item(id: int):
    """Delete a item"""
    if id not in items_db:
        raise HTTPException(status_code=404, detail="Item not found")
    
    del items_db[id]
    return {"message": "Item deleted successfully"}

if __name__ == "__main__":
    print("Starting Item API on http://localhost:4001")
    print("API Documentation: http://localhost:4001/docs")
    uvicorn.run(app, host="0.0.0.0", port=4001)
